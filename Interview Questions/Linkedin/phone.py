"""Write a program which prints out all numbers between 1 and 100. When the program would print out a number exactly divisible by 4, print "Linked" instead. When it would print out a number exactly divisible by 6, print "In" instead. When it would print out a number exactly divisible by both 4 and 6, print "LinkedIn" instead."""

# for i in range(1, 101):
#     if i % 4 == 0 and i % 6 == 0:
#         print('LinkedIn')
#     elif i % 4 == 0:
#         print('Linked')
#     elif i % 6 == 0:
#         print('In')
#     else:
#         print(i)

# 1
# 2
# 3
# Linked
# 5
# In
# 7
# print('Linked')
# 9
# 10
# 11
# LinkedIn


"""Assume there is a REST API available at "http://www.linkedin.corp/api" for accessing employee information. The employee information endpoint is "/employee/<id>". Each employee record you retrieve will be a JSON object with the following keys:

  - 'name'  refers to a String that contains the employee's first and last name

  - 'title' refers to a String that contains the employee's job title

  - 'reports' refers to an Array of Strings containing the IDs of the employee's direct reports


Sample JSON API Response:
# GET /employee/A123456789
{
 "name": "Flynn Mackie",
 "title": "Senior VP of Engineering",
 "reports": ["A123456793", "A1234567898"]
}

Write a function that will take an employee ID and print out the entire hierarchy, rooted at that employee, and including all employees under that employee.

For example, suppose that Flynn Mackie's employee id is 'A123456789' and his only direct reports are Wesley Thomas and Nina Chiswick. If you provide 'A123456789' as input to your function, you will see the sample output below.


-----------Begin Sample Output--------------
Flynn Mackie - Senior VP of Engineering
  Wesley Thomas - VP of Design
    Randall Cosmo - Director of Design
      Brenda Plager - Senior Designer
  Nina Chiswick - VP of Engineering
    Tommy Quinn - Director of Engineering
      Jake Farmer - Frontend Manager
        Liam Freeman - Junior Software Engineer
      Sheila Dunbar - Backend Manager
        Peter Young - Senior Code Cowboy

-----------End Sample Output--------------

"""

# employees = dict(
#     A123456789=dict(
#         name="Flynn Mackie",
#         title="Senior VP of Engineering",
#         reports=["A123456793", "A1234567898"],
#     ),
#     A123456793=dict(
#         name="Wesley Thomas",
#         title="VP of Design",
#         reports=["E1"],
#     ),
#     A1234567898=dict(
#         name="Nina Chiswick",
#         title="VP of Engineering",
#         reports=[],
#     ),
# )


# def print_hierarchy(employee_id):

#     def helper(employee_id, depth):
#         if employee_id not in employees:
#             return
#         # print first information
#         employee = employees[employee_id]
#         initial_indents = " " * depth
#         print(f"{initial_indents}{employee['name']} - {employee['title']}")
#         # check if there's any reports available
#         for report in employee["reports"]:
#             # report is employee id
#             helper(report, depth + 1)

#     return helper(employee_id, 0)


# print_hierarchy("A123456789")


"""
Below, see a sample of /var/log/messages.

---------- begin sample log extract ----------
Jan 20 03:25:08 fakehost logrotate: ALERT exited abnormally with [1]
Jan 20 03:25:09 fakehost run-parts(/etc/cron.daily)[20447]: finished logrotate
Jan 20 03:26:21 fakehost anacron[28969]: Job 'cron.daily' terminated
Jan 20 03:26:22 fakehost anacron[28969]: Normal exit (1 job run)
Jan 20 03:30:01 fakehost CROND[31462]: (root) CMD (/usr/lib64/sa/sa1 1 1)
Jan 20 03:30:01 fakehost CROND[31461]: (root) CMD (/var/system/bin/sys-cmd -F > /dev/null 2>&1)
Jan 20 05:03:03 fakehost ntpd[3705]: synchronized to time.faux.biz, stratum 2
Jan 20 05:20:01 fakehost rsyslogd: [origin software="rsyslogd" swVersion="5.8.10" x-pid="20438" x-info="http://www.rsyslog.com"] start
Jan 20 05:22:04 fakehost cs3[31163]:  Q: ".../bin/rsync -LD ": symlink has no referent: "/var/syscmds/fakehost/runit_scripts/etc/runit/service/superImportantService/run"#012Q: ".../bin/rsync -LD ": rsync error: some files/attrs were not transferred (see previous errors) (code 23) at main.c(1039) [sender=3.0.6]
Jan 20 05:22:04 fakehost cs3[31163]:  I: Last 2 quoted lines were generated by "/usr/local/bin/rsync -LD --recursive --delete --password-file=/var/syscmds/modules/rsync_password /var/syscmds/fakehost syscmds@fakehost::syscmds_rsync"
Jan 20 05:22:08 fakehost cs3[31163]:  Q: ".../sbin/sv restart": ok: run: /export/service/cool-service: (pid 32323) 0s
Jan 20 05:22:08 fakehost cs3[31163]:  I: Last 1 quoted lines were generated by "/sbin/sv restart /export/service/cool-service"
Jan 20 05:22:09 fakehost cs3[31163]:  R: cs3:  The cool service on fakehost does not appear to be communicating with the cool service leader.  Automating a restart of the cool service in attempt to resolve the communication problem.
Jan 20 05:22:37 fakehost ACCT_ADD: WARNING: Manifest /var/syscmds/inputs/config-general/doit.txt has been processed already, bailing
---------- end sample log extract ----------


Write a script which parses /var/log/messages and generates a CSV with two columns: minute, number_of_messages in sorted time order.

---------- begin sample output ----------
minute,number_of_messages
Jan 20 03:25,2
Jan 20 03:26,2
Jan 20 03:30,2
Jan 20 05:03,1
Jan 20 05:20,1
Jan 20 05:22,6
---------- end sample output ------------

"""
# open the file
# read file line by line
# parse each line, and generate key of minute
# as we face same minute, increment the count
# we should sort -> sort by key (since it's Jan format, we convert those into mm-dd format to make it sortable)
# then print to csv

# minute_count = dict()


# def parse(line):
#     splitted = line.split(" ")
#     time = splitted[2]
#     hh, mm, ss = time.split(":")
#     return " ".join([splitted[0], splitted[1], f"{hh}:{mm}"])


# with open("/var/log/messages", "r") as f:
#     for line in f.readline():
#         minute = parse(line)
#         if minute not in minute_count:
#             minute_count[minute] = 0
#         minute_count[minute] += 1

#     with open("result.csv", "w") as f:
#         f.write("minute,number_of_messages")
#         for key in minute_count.keys():
#             f.write(f"{key},{minute_count[key]}")


"""
---------- begin sample log extract ----------
Jan 20 03:25:08 fakehost logrotate: ALERT exited abnormally with [1]
Jan 20 03:25:09 fakehost run-parts(/etc/cron.daily)[20447]: finished logrotate
Jan 20 03:26:21 fakehost anacron[28969]: Job 'cron.daily' terminated
Jan 20 03:26:22 fakehost anacron[28969]: Normal exit (1 job run)
Jan 20 03:30:01 fakehost CROND[31462]: (root) CMD (/usr/lib64/sa/sa1 1 1)
Jan 20 03:30:01 fakehost CROND[31461]: (root) CMD (/var/system/bin/sys-cmd -F > /dev/null 2>&1)
Jan 20 05:03:03 fakehost ntpd[3705]: synchronized to time.faux.biz, stratum 2
Jan 20 05:20:01 fakehost rsyslogd: [origin software="rsyslogd" swVersion="5.8.10" x-pid="20438" x-info="http://www.rsyslog.com"] start
Jan 20 05:22:04 fakehost cs3[31163]:  Q: ".../bin/rsync -LD ": symlink has no referent: "/var/syscmds/fakehost/runit_scripts/etc/runit/service/superImportantService/run"#012Q: ".../bin/rsync -LD ": rsync error: some files/attrs were not transferred (see previous errors) (code 23) at main.c(1039) [sender=3.0.6]
Jan 20 05:22:04 fakehost cs3[31163]:  I: Last 2 quoted lines were generated by "/usr/local/bin/rsync -LD --recursive --delete --password-file=/var/syscmds/modules/rsync_password /var/syscmds/fakehost syscmds@fakehost::syscmds_rsync"
Jan 20 05:22:08 fakehost cs3[31163]:  Q: ".../sbin/sv restart": ok: run: /export/service/cool-service: (pid 32323) 0s
Jan 20 05:22:08 fakehost cs3[31163]:  I: Last 1 quoted lines were generated by "/sbin/sv restart /export/service/cool-service"
Jan 20 05:22:09 fakehost cs3[31163]:  R: cs3:  The cool service on fakehost does not appear to be communicating with the cool service leader.  Automating a restart of the cool service in attempt to resolve the communication problem.
Jan 20 05:22:37 fakehost ACCT_ADD: WARNING: Manifest /var/syscmds/inputs/config-general/doit.txt has been processed already, bailing
---------- end sample log extract ----------

Extract the program name from the field between the hostname and the log message and output those values in columns.

---------- begin sample output ----------
minute,total_count,logrotate,run-parts,anacron,CROND,ntpd,rsyslogd,cs3,ACCT_ADD
Jan 20 03:25,2,1,1,0,0,0,0,0,0
Jan 20 03:26,2,0,0,2,0,0,0,0,0
Jan 20 03:30,2,0,0,0,2,0,0,0,0
Jan 20 05:03,1,0,0,0,0,1,0,0,0
Jan 20 05:20,1,0,0,0,0,0,1,0,0
Jan 20 05:22,6,0,0,0,0,0,0,5,1
---------- end sample output ------------

Note: It is important that your program work with any arbitrary set of programs, not just the ones in the example output.

"""

# minute_count = dict()


# def program_parse(raw_program):
#     res = ""
#     for i in range(len(raw_program)):
#         if i == "(" or i == "[":
#             return res
#         res += raw_program[i]
#     return res


# def parse(line):
#     splitted = line.split(" ")
#     time = splitted[2]
#     hh, mm, ss = time.split(":")
#     program_parsed = program_parse(splitted[4])
#     return " ".join([splitted[0], splitted[1], f"{hh}:{mm}"]), program_parsed


# def main(columns):
#     with open("/var/log/messages", "r") as f:
#         for line in f.readline():
#             minute, program_parsed = parse(line)
#             if minute not in minute_count:
#                 minute_count[minute] = dict()
#             if program_parsed not in minute_count[minute]:
#                 minute_count[minute][program_parsed] = 0
#             minute_count[minute][program_parsed] += 1

#         with open("result.csv", "w") as f:
#             f.write("minute,total_count," + ",".join(columns))
#             for minute_count in minute_count.keys():
#                 temp_str = ""
#                 temp_str += minute_count
#                 programs_count = minute_count[minute_count]
#                 temp_arr = []
#                 for column in columns:
#                     temp_arr.append(programs_count[column])
#                 full_format = temp_str + "," + ",".join(temp_arr)
#                 f.write(full_format)
